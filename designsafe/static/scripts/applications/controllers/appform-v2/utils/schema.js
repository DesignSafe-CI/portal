module.exports = (icons, categories) => ({
    1: {
        name: {
            type: 'string',
            description:
                'The name of the application. The name does not have to be unique, but the combination of name and version does',
            title: 'Name',
            validator: '[a-zA-Z_\\-\\.]+',
            minLength: 3,
            maxLength: 64,
            defaultValue: 'shell-runner',
        },
        version: {
            type: 'string',
            description:
                'The version of the application in #.#.# format. While the version does not need to be unique, the combination of name and version does have to be unique',
            title: 'Version',
            validator: '\\d+(\\.\\d+)+',
            minLength: 3,
            maxLength: 16,
            defaultValue: '0.1.0',
        },
        label: {
            type: 'string',
            description: 'Label for use in forms generated by the jobs service',
            title: 'Label',
            defaultValue: 'Execute a command at a shell',
        },
        appCategory: {
            type: 'string',
            description: 'Categorization for this app if made public',
            enum: categories,
            title: 'Category',
            defaultValue: '',
        },
        appIcon: {
            type: 'string',
            description: 'The icon to associate with this app',
            title: 'Icon',
            enum: icons.sort(),
            //   'validator': '(http|https)://[\\w-]+(\\.[\\w-]*)+([\\w.,@?^=%&amp;:/~+#-]*[\\w@?^=%&amp;/~+#-])?'
            defaultValue: '',
        },
        shortDescription: {
            type: 'string',
            description: 'Short description of this app',
            maxLength: 128,
            title: 'Short description',
            defaultValue: 'This will execute whatever command you give in the command parameter',
        },
        longDescription: {
            type: 'string',
            description: 'Full description of this app',
            maxLength: 32768,
            title: 'Long description',
            defaultValue: 'This will execute whatever command you give in the command parameter',
        },
        tags: {
            type: 'array',
            description: 'Array of terms you may associate with this app',
            items: {
                type: 'string',
            },
            title: 'Tags',
            defaultValue: ['execute', 'awesome', 'demo'],
        },
        helpURI: {
            type: 'string',
            description: 'The URL where users can go for more information about the app',
            format: 'url',
            title: 'Help URL',
            // 'validator': '(http|https)://[\\w-]+(\\.[\\w-]*)+([\\w.,@?^=%&amp;:/~+#-]*[\\w@?^=%&amp;/~+#-])?',
            defaultValue: 'http://agaveapi.co/documentation/tutorials/app-management-tutorial'
        },
        ontology: {
            type: 'array',
            description: 'An array of ontology values describing this app.',
            items: {
                type: 'string',
            },
            title: 'Ontology',
            defaultValue: []
        },
    },
    2: {},
    3: {},
    4: {},
    5: {},
    defaultQueue: {
        type: [null, 'string'],
        description:
            'Default queue to use when submitting this job if none is provided in the job request. Can be left blank and a queue will be determined at run time',
        maxLength: 128,
        title: 'Default queue',
    },
    defaultNodeCount: {
        type: 'integer',
        description:
            'Default number of nodes to be used when running this app if no node count is given in the job request',
        maxLength: 12,
        minimum: 0,
        exclusiveMinimum: true,
        title: 'Default node count',
        'x-schema-form': {
            type: 'number',
            placeholder: 1,
        },
    },
    defaultMemoryPerNode: {
        type: 'number',
        description: 'Default memory in GB to be used when running this app if no memory is given in the job request',
        maxLength: 9,
        minimum: 0,
        exclusiveMinimum: true,
        title: 'Default memory (GB)',
        'x-schema-form': {
            type: 'number',
            placeholder: 4,
        },
    },
    defaultProcessorsPerNode: {
        type: 'integer',
        description:
            'Default number of processors per node to be used when running this app if no processor count is given in the job request',
        maxLength: 12,
        title: 'Default processor count',
        'x-schema-form': {
            type: 'number',
            placeholder: 1,
        },
    },
    defaultMaxRunTime: {
        type: 'string',
        description:
            'Default max run time to be used when running this app if no requested run time is given in the job request',
        maxLength: 10,
        title: 'Default run time',
        validator: '^(?:[0-9]{1,3}?[0-9]):[0-5][0-9]:[0-5][0-9]$',
        'x-schema-form': {
            type: 'input',
            placeholder: '24:00:00',
        },
    },
    executionSystem: {
        type: 'string',
        description: 'The ID of the execution system where this app should run.',
        items: [],
        title: 'Execution system',
    },
    executionType: {
        type: 'string',
        description: "The execution type of the application. If you're unsure, it's probably HPC",
        enum: ['CLI', 'HPC', 'CONDOR'],
        title: 'Execution type',
    },
    parallelism: {
        type: 'string',
        description: "The parallelism type of the application. If you're unsure, it's probably SERIAL",
        enum: ['SERIAL', 'PARALLEL', 'PTHREAD'],
        title: 'Parallelism',
    },
    deploymentPath: {
        type: 'string',
        description:
            'The path to the folder on the deployment system containing the application wrapper and dependencies',
        title: 'Deployment path',
    },
    deploymentSystem: {
        type: 'string',
        description: "The ID of the storage system where this app's assets should be stored.",
        items: [],
        title: 'Deployment system',
    },
    templatePath: {
        type: 'string',
        description: 'The path to the wrapper script relative to the deploymentPath',
        title: 'Wrapper script',
    },
    testPath: {
        type: 'string',
        description: 'The path to the test script relative to the deploymentPath',
        title: 'Test script',
    },
    checkpointable: {
        type: 'boolean',
        description: 'Does this app support checkpointing?',
        title: 'Checkpointable',
    },
    modules: {
        type: 'array',
        description:
            'An array of modules to load prior to the execution of the application. This is only relevant when you use the unix Modules or LMOD utilities to manage dependencies on the app execution system',
        items: {
            type: 'string',
        },
        title: 'Modules',
    },
    parameters: {
        type: 'array',
        description: 'Non-file inputs supported by this application.',
        items: {
            type: 'object',
            title: 'Parameter',
            properties: {
                id: {
                    type: 'string',
                    maxLength: 256,
                    minLength: 1,
                    description:
                        'The unique identifier for this parameter. This will be referenced in the wrapper script',
                    title: 'Parameter ID',
                },
                details: {
                    type: 'object',
                    description: 'Descriptive details about this app parameter used in form generation',
                    title: 'Details',
                    properties: {
                        label: {
                            type: 'string',
                            description: 'The label displayed for this parameter',
                            title: 'Label',
                        },
                        description: {
                            type: 'string',
                            description: 'Verbose information on what this parameter does',
                            title: 'Description',
                            default: true,
                        },
                        showArgument: {
                            type: 'boolean',
                            description:
                                'Should this command line argument be injected into the submit script preceding the parameter?',
                            title: 'Prepend command line argument?',
                        },
                        argument: {
                            type: 'string',
                            description:
                                'Name of the command line flag or argument (including dashes) for this parameter',
                            title: 'Argument value',
                        },
                        repeatArgument: {
                            type: 'boolean',
                            description:
                                'In instances where multiple values are supplied for this parameter, should this command line argument be repeatedly injected into the submit script preceding every instance of the parameter value?',
                            title: 'Repeat argument for every value?',
                            default: false,
                        },
                    },
                },
                semantics: {
                    type: 'object',
                    description: 'Semantic information about the parameter field',
                    title: 'Semantics',
                    properties: {
                        minCardinality: {
                            type: 'integer',
                            description: 'Minimum number of instances of this parameter per job',
                            title: 'Min cardinality',
                            default: 0,
                            minimum: 0,
                            required: false,
                        },
                        maxCardinality: {
                            title: 'Max cardinality',
                            type: 'integer',
                            description: 'Max number of instances of this parameter per job',
                            default: -1,
                            minimum: -1,
                            required: false,
                        },
                        ontology: {
                            title: 'Ontology',
                            type: 'array',
                            description: 'Array of ontology terms describing this parameter.',
                            items: {
                                type: 'string',
                            },
                        },
                    },
                },
                value: {
                    type: 'object',
                    description: 'Default value and validations for the parameter field',
                    title: 'Value',
                    properties: {
                        default: {
                            type: ['number', 'string'],
                            description: 'Default value',
                            title: 'Default value',
                        },
                        type: {
                            type: 'string',
                            description: 'The content type of the parameter',
                            enum: ['string', 'number', 'bool', 'enumeration', 'flag'],
                            title: 'Parameter type',
                        },
                        validator: {
                            type: 'string',
                            description: 'The regular expression used to validate this parameter value',
                            title: 'Validator regex',
                        },
                        enum_values: {
                            type: 'array',
                            description:
                                'The possible values this parameter accepts. A JSON array of string values should be provided',
                            title: 'Enumerated values',
                            items: {
                                type: 'string',
                            },
                        },
                        required: {
                            type: 'boolean',
                            description: 'Is this parameter required? If visible is false, this must be true',
                            title: 'Required',
                            default: true,
                        },
                        visible: {
                            type: 'boolean',
                            description:
                                'Should this parameter be visible? If not, there must be a default and it will be required',
                            title: 'Visible',
                            default: true,
                        },
                        order: {
                            type: 'integer',
                            description:
                                'The order in which this parameter should be printed when generating an execution command for forked execution. This will also be the order in which paramters are returned in the response json',
                            title: 'Order',
                        },
                    },
                },
            },
        },
    },
    inputs: {
        type: 'array',
        description: 'Inputs supported by this application.',
        items: {
            type: 'object',
            title: 'Input',
            properties: {
                id: {
                    type: 'string',
                    description:
                        'The unique identifier for this input file. This will be referenced in the wrapper script.',
                    title: 'ID',
                    valueInLegend: true,
                },
                details: {
                    type: 'object',
                    description: 'Descriptive details about this app input used in form generation.',
                    title: 'Details',
                    properties: {
                        argument: {
                            type: 'string',
                            description: 'Name of the command line flag or argument (including dashes) for this input.',
                            title: 'Argument value',
                        },
                        description: {
                            type: 'string',
                            description: 'Verbose information on what this input does.',
                            title: 'Description',
                        },
                        label: {
                            type: 'string',
                            description: 'The label displayed for this input.',
                            title: 'Label',
                        },
                        showArgument: {
                            type: 'boolean',
                            description:
                                'Should this command line argument be injected into the submit script preceding the input?',
                            title: 'Prepend command line argument?',
                            default: true,
                        },
                        repeatArgument: {
                            type: 'boolean',
                            description:
                                'In instances where multiple values are supplied for this input, should this command line argument be repeatedly injected into the submit script preceding every instance of the input value?',
                            title: 'Repeat argument for every value?',
                            default: false,
                        },
                    },
                },
                semantics: {
                    type: 'object',
                    description: 'Semantic information about the input field.',
                    title: 'Semantics',
                    properties: {
                        fileTypes: {
                            type: 'array',
                            description: 'Array of file types required for this input.',
                            items: {
                                type: 'string',
                            },
                            title: 'File types',
                        },
                        minCardinality: {
                            type: 'integer',
                            description: 'Minimum number of instances of this input per job.',
                            title: 'Min cardinality',
                            default: 0,
                            minimum: 0,
                            required: false,
                        },
                        maxCardinality: {
                            title: 'Max cardinality',
                            type: 'integer',
                            description: 'Max number of instances of this input per job.',
                            default: -1,
                            minimum: -1,
                            required: false,
                        },
                        ontology: {
                            title: 'Ontology',
                            type: 'array',
                            description: 'Array of ontology terms describing this input.',
                            items: {
                                type: 'string',
                            },
                        },
                    },
                },
                value: {
                    type: 'object',
                    description: 'Default value and validations for the parameter field.',
                    title: 'Value',
                    properties: {
                        default: {
                            type: ['number', 'string'],
                            description: 'Default value',
                            title: 'Default value',
                        },
                        order: {
                            type: 'integer',
                            description:
                                'The order in which this parameter should be printed when generating an execution command for forked execution. This will also be the order in which paramters are returned in the response json.',
                            title: 'Order',
                        },
                        validator: {
                            type: 'string',
                            description: 'The regular expression used to validate this parameter value.',
                            title: 'Validator regex',
                        },
                        required: {
                            type: 'boolean',
                            description: 'Is this parameter required? If visible is false, this must be true.',
                            title: 'Required',
                            default: true,
                        },
                        visible: {
                            type: 'boolean',
                            description:
                                'Should this parameter be visible? If not, there must be a default and it will be required.',
                            title: 'Visible',
                            default: true,
                        },
                        enquote: {
                            type: 'boolean',
                            description:
                                'Should this value be double quoted prior to injection in the wrapper template.',
                            title: 'Visible',
                            default: true,
                            required: true,
                        },
                    },
                },
            },
        },
    },
});
